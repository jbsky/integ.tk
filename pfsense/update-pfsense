#!/bin/bash
# Ce script a besoin de Python3 et de lxml
# => pip3 install lxml
# Afin d'adapter à votre environnement,
# Merci de disposer de vos certificats selon cette structure :
# $dir/a/cert.pem
# $dir/a/privkey.pem
# $dir/a/chain.pem
# $dir/b/cert.pem
# $dir/b/privkey.pem
# $dir/b/chain.pem
# ...
# Renseigner $list et $dir :
# list="a b ..."
#
##################### Partie à configurer #####################
sshpass='root@pfsense.localdomain'
list="integ.tk pfsense.localdomain"
dir="/etc/letsencrypt/live"
############################# Fin #############################

info_report() {
MSG="[Info] $1"
echo $MSG
logger $MSG
}

err_report() {
MSG="[Err] $1"
echo $MSG
logger $MSG
}

backup=/backup/$(date +%Y%m%d%H%M)
mkdir -p $backup

configFile="/tmp/config.xml"
info_report  "Backup de la configuration de Pfsense $backup"

outputFile="/tmp/output.xml"
ssh $sshpass cat /cf/conf/config.xml > $configFile
cp $configFile  $backup/$(basename $configFile).origin

cp $configFile $outputFile

for d in $list
do

  # cert.pem  chain.pem  fullchain.pem  privkey.pem
  cert64=$(cat $dir/$d/cert.pem | base64 -w 0)
  priv64=$(cat $dir/$d/privkey.pem | base64 -w 0)
  chain64=$(cat $dir/$d/chain.pem | base64 -w 0)

  python3 - << EOF
import lxml.etree
parser = lxml.etree.XMLParser(strip_cdata=False)

def cert_replace(root):
  for i in range(len(root)):
    if root[i].tag == 'cert':
      if "$d" == root[i][1].text:
        for j in range(len(root[i])):
          if root[i][j].tag == "prv":
            root[i][j].text = "$priv64"
          if root[i][j].tag == "crt":
            root[i][j].text = "$cert64"
          if root[i][j].tag == "caref":
            caref = root[i][j].text

        for i in range(len(root)):
          if root[i].tag == 'ca' and root[i][0].text == caref:
            for j in range(len(root[i])):
              if root[i][j].tag == "crt":
                root[i][j].text = "$chain64"

def cleanNode(root):
  if len(root) > 0:
    for i in range(len(root)):
      if len(root[i]) > 0 :
        cleanNode(root[i])
      if root[i].text is None:
        root[i].text = ""

with open(r'$outputFile', encoding="utf8") as f:
  XML = lxml.etree.parse(f, parser)
  root = XML.getroot()
  cert_replace(root)
  cleanNode(root)
  XML.write("$outputFile", xml_declaration=True)

EOF

# Format XML comme
var=$(head -1 $configFile)
sed -i "1s/.*/$var/" $outputFile

echo "" >> $outputFile

if [[ $(diff $configFile $outputFile -u) != "" ]];
then

	info_report  "Debut de la mise a jour de la conf Pfsense"
	cp $outputFile  $backup/$(basename $outputFile).upload
	cat  $outputFile | ssh $sshpass "cat > /cf/conf/config.xml"
	ssh $sshpass "rm /tmp/config.cache"
	ssh $sshpass "/usr/local/etc/rc.d/haproxy.sh stop"
	ssh $sshpass "/usr/local/etc/rc.d/haproxy.sh start"
	ssh $sshpass "/usr/local/etc/rc.d/haproxy.sh status"
	info_report  "Fin de la mise a jour de la conf Pfsense"
fi
